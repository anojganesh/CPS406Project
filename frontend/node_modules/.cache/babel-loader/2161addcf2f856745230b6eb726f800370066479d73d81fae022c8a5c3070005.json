{"ast":null,"code":"var _jsxFileName = \"C:\\\\CPS406Project\\\\frontend\\\\src\\\\admin\\\\income.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/admin.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonthlyReceipt = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [itemName, setItemName] = useState(\"\");\n  const [cost, setCost] = useState(\"\");\n  const [type, setType] = useState(\"revenue\");\n  useEffect(() => {\n    const fetchExpenses = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/getexpenses\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch expenses\");\n        }\n        const data = await response.json(); // Convert response to JSON format\n        console.log(data); // Log the fetched expenses data\n\n        const mappedExpenses = data.map(entry => ({\n          date: new Date(entry.date),\n          // Convert date string to Date object\n          type: \"Expense\",\n          source: entry.source,\n          amount: entry.amount\n        }));\n        return mappedExpenses;\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n        return [];\n      }\n    };\n    const fetchRevenues = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/getallpayments\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch revenues\");\n        }\n        const data = await response.json(); // Convert response to JSON format\n        console.log(data); // Log the fetched revenues data\n\n        const mappedRevenues = data.map(entry => ({\n          date: new Date(entry.date),\n          // Convert date string to Date object\n          type: \"Revenue\",\n          source: \"Payment - \",\n          amount: entry.amount\n        }));\n        return mappedRevenues;\n      } catch (error) {\n        console.error(\"Error fetching revenues:\", error);\n        return [];\n      }\n    };\n    const fetchData = async () => {\n      const expenses = await fetchExpenses();\n      const revenues = await fetchRevenues();\n\n      // Merge expenses and revenues, then sort by date\n      const mergedData = [...expenses, ...revenues].sort((a, b) => a.date - b.date);\n      setTransactions(mergedData); // Update state with sorted and merged data\n    };\n    fetchData();\n  }, []);\n\n  // Calculate total revenue, total expenses, and profit\n  const totalRevenue = transactions.filter(transaction => transaction.type === \"Revenue\").reduce((acc, curr) => acc + curr.amount, 0);\n  const totalExpenses = transactions.filter(transaction => transaction.type === \"Expense\").reduce((acc, curr) => acc + curr.amount, 0);\n  const profit = totalRevenue - totalExpenses;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"receipt-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Club Finances Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monthly Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-transaction-form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabletrans\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"transaction-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Source/Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.date.toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.source\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"$\", transaction.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"income-statement\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Revenue: $\", totalRevenue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Expenses: $\", totalExpenses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Profit: $\", profit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyReceipt, \"7+dmwVkvHa03qT4PXly3hinqYUc=\");\n_c = MonthlyReceipt;\nexport default MonthlyReceipt;\nvar _c;\n$RefreshReg$(_c, \"MonthlyReceipt\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MonthlyReceipt","_s","transactions","setTransactions","itemName","setItemName","cost","setCost","type","setType","fetchExpenses","response","fetch","method","headers","ok","Error","data","json","console","log","mappedExpenses","map","entry","date","Date","source","amount","error","fetchRevenues","mappedRevenues","fetchData","expenses","revenues","mergedData","sort","a","b","totalRevenue","filter","transaction","reduce","acc","curr","totalExpenses","profit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/CPS406Project/frontend/src/admin/income.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/admin.css\";\r\n\r\nconst MonthlyReceipt = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [itemName, setItemName] = useState(\"\");\r\n  const [cost, setCost] = useState(\"\");\r\n  const [type, setType] = useState(\"revenue\");\r\n\r\n  useEffect(() => {\r\n    const fetchExpenses = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/getexpenses\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch expenses\");\r\n        }\r\n\r\n        const data = await response.json(); // Convert response to JSON format\r\n        console.log(data); // Log the fetched expenses data\r\n\r\n        const mappedExpenses = data.map((entry) => ({\r\n          date: new Date(entry.date), // Convert date string to Date object\r\n          type: \"Expense\",\r\n          source: entry.source,\r\n          amount: entry.amount,\r\n        }));\r\n\r\n        return mappedExpenses;\r\n      } catch (error) {\r\n        console.error(\"Error fetching expenses:\", error);\r\n        return [];\r\n      }\r\n    };\r\n\r\n    const fetchRevenues = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/getallpayments\", {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch revenues\");\r\n        }\r\n\r\n        const data = await response.json(); // Convert response to JSON format\r\n        console.log(data); // Log the fetched revenues data\r\n\r\n        const mappedRevenues = data.map((entry) => ({\r\n          date: new Date(entry.date), // Convert date string to Date object\r\n          type: \"Revenue\",\r\n          source: \"Payment - \",\r\n          amount: entry.amount,\r\n        }));\r\n\r\n        return mappedRevenues;\r\n      } catch (error) {\r\n        console.error(\"Error fetching revenues:\", error);\r\n        return [];\r\n      }\r\n    };\r\n\r\n    const fetchData = async () => {\r\n      const expenses = await fetchExpenses();\r\n      const revenues = await fetchRevenues();\r\n\r\n      // Merge expenses and revenues, then sort by date\r\n      const mergedData = [...expenses, ...revenues].sort(\r\n        (a, b) => a.date - b.date\r\n      );\r\n\r\n      setTransactions(mergedData); // Update state with sorted and merged data\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Calculate total revenue, total expenses, and profit\r\n  const totalRevenue = transactions\r\n    .filter((transaction) => transaction.type === \"Revenue\")\r\n    .reduce((acc, curr) => acc + curr.amount, 0);\r\n\r\n  const totalExpenses = transactions\r\n    .filter((transaction) => transaction.type === \"Expense\")\r\n    .reduce((acc, curr) => acc + curr.amount, 0);\r\n\r\n  const profit = totalRevenue - totalExpenses;\r\n\r\n  return (\r\n    <div className=\"receipt-container\">\r\n      <h1 className=\"title\">Club Finances Admin Dashboard</h1>\r\n      <h1>Monthly Transactions</h1>\r\n      <div className=\"add-transaction-form\">\r\n        {/* Your input fields and button for adding transactions */}\r\n      </div>\r\n\r\n      <div className=\"tabletrans\">\r\n        <table className=\"transaction-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Type</th>\r\n              <th>Source/Category</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {transactions.map((transaction, index) => (\r\n              <tr key={index}>\r\n                <td>{transaction.date.toLocaleDateString()}</td>\r\n                <td>{transaction.type}</td>\r\n                <td>{transaction.source}</td>\r\n                <td>${transaction.amount}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"income-statement\">\r\n        <h3>Total Revenue: ${totalRevenue}</h3>\r\n        <h3>Total Expenses: ${totalExpenses}</h3>\r\n        <h3>Profit: ${profit}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthlyReceipt;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}