{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import\"../styles/admin.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MonthlyReceipt=()=>{const[transactions,setTransactions]=useState([]);const[itemName,setItemName]=useState(\"\");const[cost,setCost]=useState(\"\");const[type,setType]=useState(\"revenue\");useEffect(()=>{fetchData();},[]);const fetchData=async()=>{const expenses=await fetchExpenses();const revenues=await fetchRevenues();let mergedData=[...expenses,...revenues].sort((a,b)=>b.date-a.date);mergedData=mergedData;setTransactions(mergedData);};const fetchExpenses=async()=>{try{const response=await fetch(\"/getexpenses\",{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){throw new Error(\"Failed to fetch expenses\");}const data=await response.json();console.log(data);const mappedExpenses=data.map(entry=>({date:new Date(entry.date),type:\"Expense\",source:entry.source,amount:entry.amount}));return mappedExpenses;}catch(error){console.error(\"Error fetching expenses:\",error);return[];}};// const fetchRevenues = async () => {\n//   try {\n//     const response = await fetch(\"http://localhost:5000/getallpayments\", {\n//       method: \"GET\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//     });\n//     if (!response.ok) {\n//       throw new Error(\"Failed to fetch revenues\");\n//     }\n//     const data = await response.json();\n//     console.log(data);\n//     const mappedRevenues = data.map((entry) => ({\n//       date: new Date(entry.date),\n//       type: \"Revenue\",\n//       source: \"Payment - \" + entry.fullname,\n//       amount: entry.amount,\n//     }));\n//     return mappedRevenues;\n//   } catch (error) {\n//     console.error(\"Error fetching revenues:\", error);\n//     return [];\n//   }\n// };\nconst fetchRevenues=async()=>{try{// Fetch revenues data\nconst revenuesResponse=await fetch(\"/getrevenue\",{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!revenuesResponse.ok){throw new Error(\"Failed to fetch revenues\");}const revenuesData=await revenuesResponse.json();// Fetch payments data\nconst paymentsResponse=await fetch(\"/getallpayments\",{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!paymentsResponse.ok){throw new Error(\"Failed to fetch payments\");}const paymentsData=await paymentsResponse.json();const combinedData=[...revenuesData.map(entry=>({date:new Date(entry.date),type:\"Revenue\",source:entry.source,amount:entry.amount})),...paymentsData.map(entry=>({date:new Date(entry.date),type:\"Payment\",source:\"Payment - \"+entry.fullname,amount:entry.amount}))];combinedData.sort((a,b)=>b.date-a.date);return combinedData;}catch(error){console.error(\"Error fetching financial data:\",error);return[];}};const addTransaction=()=>{const data={date:new Date().toISOString().slice(0,10),source:itemName,amount:parseFloat(cost),category:itemName};const endpoint=type===\"revenue\"?\"/revenues\":\"/expenses\";fetch(endpoint,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(data)}).then(response=>response.json()).then(data=>{console.log(\"Transaction added:\",data);setItemName(\"\");setCost(\"\");setType(\"revenue\");fetchData();}).catch(error=>console.error(\"Error adding transaction:\",error));};const totalRevenue=transactions.filter(transaction=>transaction.type===\"Revenue\"||transaction.type===\"Payment\").reduce((acc,curr)=>acc+curr.amount,0);const totalExpenses=transactions.filter(transaction=>transaction.type===\"Expense\").reduce((acc,curr)=>acc+curr.amount,0);const profit=totalRevenue-totalExpenses;return/*#__PURE__*/_jsxs(\"div\",{className:\"receipt-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Club Finances Admin Dashboard\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Monthly Transactions\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"add-transaction-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:itemName,onChange:e=>setItemName(e.target.value),placeholder:\"Item Name\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:cost,onChange:e=>setCost(e.target.value),placeholder:\"Cost\"}),/*#__PURE__*/_jsxs(\"select\",{value:type,onChange:e=>setType(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"revenue\",children:\"Revenue\"}),/*#__PURE__*/_jsx(\"option\",{value:\"expense\",children:\"Expense\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:addTransaction,children:\"Add Transaction\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"tabletrans\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"transaction-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Date\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Type\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Source/Category\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Amount\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:transactions.map((transaction,index)=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:transaction.date.toLocaleDateString()}),/*#__PURE__*/_jsx(\"td\",{children:transaction.type}),/*#__PURE__*/_jsx(\"td\",{children:transaction.source}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",transaction.amount]})]},index))})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"income-statement\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Total Revenue: $\",totalRevenue]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Total Expenses: $\",totalExpenses]}),/*#__PURE__*/_jsxs(\"h3\",{children:[\"Profit: $\",profit]})]})]});};export default MonthlyReceipt;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","MonthlyReceipt","transactions","setTransactions","itemName","setItemName","cost","setCost","type","setType","fetchData","expenses","fetchExpenses","revenues","fetchRevenues","mergedData","sort","a","b","date","response","fetch","method","headers","ok","Error","data","json","console","log","mappedExpenses","map","entry","Date","source","amount","error","revenuesResponse","revenuesData","paymentsResponse","paymentsData","combinedData","fullname","addTransaction","toISOString","slice","parseFloat","category","endpoint","body","JSON","stringify","then","catch","totalRevenue","filter","transaction","reduce","acc","curr","totalExpenses","profit","className","children","value","onChange","e","target","placeholder","onClick","index","toLocaleDateString"],"sources":["C:/Users/sujee/OneDrive/Documents/CPS406Project-main (1)/CPS406Project-main/frontend/src/admin/income.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/admin.css\";\r\n\r\nconst MonthlyReceipt = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [itemName, setItemName] = useState(\"\");\r\n  const [cost, setCost] = useState(\"\");\r\n  const [type, setType] = useState(\"revenue\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    const expenses = await fetchExpenses();\r\n    const revenues = await fetchRevenues();\r\n\r\n    let mergedData = [...expenses, ...revenues].sort((a, b) => b.date - a.date);\r\n\r\n    mergedData = mergedData;\r\n\r\n    setTransactions(mergedData);\r\n  };\r\n\r\n  const fetchExpenses = async () => {\r\n    try {\r\n      const response = await fetch(\"/getexpenses\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch expenses\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n\r\n      const mappedExpenses = data.map((entry) => ({\r\n        date: new Date(entry.date),\r\n        type: \"Expense\",\r\n        source: entry.source,\r\n        amount: entry.amount,\r\n      }));\r\n\r\n      return mappedExpenses;\r\n    } catch (error) {\r\n      console.error(\"Error fetching expenses:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // const fetchRevenues = async () => {\r\n  //   try {\r\n  //     const response = await fetch(\"http://localhost:5000/getallpayments\", {\r\n  //       method: \"GET\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //     });\r\n\r\n  //     if (!response.ok) {\r\n  //       throw new Error(\"Failed to fetch revenues\");\r\n  //     }\r\n\r\n  //     const data = await response.json();\r\n  //     console.log(data);\r\n\r\n  //     const mappedRevenues = data.map((entry) => ({\r\n  //       date: new Date(entry.date),\r\n  //       type: \"Revenue\",\r\n  //       source: \"Payment - \" + entry.fullname,\r\n  //       amount: entry.amount,\r\n  //     }));\r\n\r\n  //     return mappedRevenues;\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching revenues:\", error);\r\n  //     return [];\r\n  //   }\r\n  // };\r\n\r\n  const fetchRevenues = async () => {\r\n    try {\r\n      // Fetch revenues data\r\n      const revenuesResponse = await fetch(\"/getrevenue\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (!revenuesResponse.ok) {\r\n        throw new Error(\"Failed to fetch revenues\");\r\n      }\r\n      const revenuesData = await revenuesResponse.json();\r\n\r\n      // Fetch payments data\r\n      const paymentsResponse = await fetch(\"/getallpayments\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (!paymentsResponse.ok) {\r\n        throw new Error(\"Failed to fetch payments\");\r\n      }\r\n      const paymentsData = await paymentsResponse.json();\r\n\r\n      const combinedData = [\r\n        ...revenuesData.map((entry) => ({\r\n          date: new Date(entry.date),\r\n          type: \"Revenue\",\r\n          source: entry.source,\r\n          amount: entry.amount,\r\n        })),\r\n        ...paymentsData.map((entry) => ({\r\n          date: new Date(entry.date),\r\n          type: \"Payment\",\r\n          source: \"Payment - \" + entry.fullname,\r\n          amount: entry.amount,\r\n        })),\r\n      ];\r\n\r\n      combinedData.sort((a, b) => b.date - a.date);\r\n\r\n      return combinedData;\r\n    } catch (error) {\r\n      console.error(\"Error fetching financial data:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const addTransaction = () => {\r\n    const data = {\r\n      date: new Date().toISOString().slice(0, 10),\r\n      source: itemName,\r\n      amount: parseFloat(cost),\r\n      category: itemName,\r\n    };\r\n\r\n    const endpoint = type === \"revenue\" ? \"/revenues\" : \"/expenses\";\r\n    fetch(endpoint, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Transaction added:\", data);\r\n        setItemName(\"\");\r\n        setCost(\"\");\r\n        setType(\"revenue\");\r\n        fetchData();\r\n      })\r\n      .catch((error) => console.error(\"Error adding transaction:\", error));\r\n  };\r\n\r\n  const totalRevenue = transactions\r\n    .filter(\r\n      (transaction) =>\r\n        transaction.type === \"Revenue\" || transaction.type === \"Payment\"\r\n    )\r\n    .reduce((acc, curr) => acc + curr.amount, 0);\r\n\r\n  const totalExpenses = transactions\r\n    .filter((transaction) => transaction.type === \"Expense\")\r\n    .reduce((acc, curr) => acc + curr.amount, 0);\r\n\r\n  const profit = totalRevenue - totalExpenses;\r\n\r\n  return (\r\n    <div className=\"receipt-container\">\r\n      <h1 className=\"title\">Club Finances Admin Dashboard</h1>\r\n      <h1>Monthly Transactions</h1>\r\n      <div className=\"add-transaction-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={itemName}\r\n          onChange={(e) => setItemName(e.target.value)}\r\n          placeholder=\"Item Name\"\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={cost}\r\n          onChange={(e) => setCost(e.target.value)}\r\n          placeholder=\"Cost\"\r\n        />\r\n        <select value={type} onChange={(e) => setType(e.target.value)}>\r\n          <option value=\"revenue\">Revenue</option>\r\n          <option value=\"expense\">Expense</option>\r\n        </select>\r\n        <button onClick={addTransaction}>Add Transaction</button>\r\n      </div>\r\n\r\n      <div className=\"tabletrans\">\r\n        <table className=\"transaction-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Type</th>\r\n              <th>Source/Category</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {transactions.map((transaction, index) => (\r\n              <tr key={index}>\r\n                <td>{transaction.date.toLocaleDateString()}</td>\r\n                <td>{transaction.type}</td>\r\n                <td>{transaction.source}</td>\r\n                <td>${transaction.amount}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"income-statement\">\r\n        <h3>Total Revenue: ${totalRevenue}</h3>\r\n        <h3>Total Expenses: ${totalExpenses}</h3>\r\n        <h3>Profit: ${profit}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthlyReceipt;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}