{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cyber\\\\Desktop\\\\GITHUB\\\\CPS406Project\\\\frontend\\\\src\\\\admin\\\\income.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../styles/admin.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonthlyReceipt = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [itemName, setItemName] = useState(\"\");\n  const [cost, setCost] = useState(\"\");\n  const [type, setType] = useState(\"revenue\");\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    const expenses = await fetchExpenses();\n    const revenues = await fetchRevenues();\n    let mergedData = [...expenses, ...revenues].sort((a, b) => b.date - a.date);\n    mergedData = mergedData;\n    setTransactions(mergedData);\n  };\n  const fetchExpenses = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5000/getexpenses\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n      }\n      const data = await response.json();\n      console.log(data);\n      const mappedExpenses = data.map(entry => ({\n        date: new Date(entry.date),\n        type: \"Expense\",\n        source: entry.source,\n        amount: entry.amount\n      }));\n      return mappedExpenses;\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      return [];\n    }\n  };\n\n  // const fetchRevenues = async () => {\n  //   try {\n  //     const response = await fetch(\"http://localhost:5000/getallpayments\", {\n  //       method: \"GET\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error(\"Failed to fetch revenues\");\n  //     }\n\n  //     const data = await response.json();\n  //     console.log(data);\n\n  //     const mappedRevenues = data.map((entry) => ({\n  //       date: new Date(entry.date),\n  //       type: \"Revenue\",\n  //       source: \"Payment - \" + entry.fullname,\n  //       amount: entry.amount,\n  //     }));\n\n  //     return mappedRevenues;\n  //   } catch (error) {\n  //     console.error(\"Error fetching revenues:\", error);\n  //     return [];\n  //   }\n  // };\n\n  const fetchRevenues = async () => {\n    try {\n      // Fetch revenues data\n      const revenuesResponse = await fetch(\"http://localhost:5000/getrevenue\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!revenuesResponse.ok) {\n        throw new Error(\"Failed to fetch revenues\");\n      }\n      const revenuesData = await revenuesResponse.json();\n\n      // Fetch payments data\n      const paymentsResponse = await fetch(\"http://localhost:5000/getallpayments\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      if (!paymentsResponse.ok) {\n        throw new Error(\"Failed to fetch payments\");\n      }\n      const paymentsData = await paymentsResponse.json();\n\n      // Process and merge the data from both endpoints\n      const combinedData = [...revenuesData.map(entry => ({\n        date: new Date(entry.date),\n        type: \"Revenue\",\n        source: entry.source,\n        amount: entry.amount\n      })), ...paymentsData.map(entry => ({\n        date: new Date(entry.date),\n        type: \"Payment\",\n        source: \"Payment - \" + entry.fullname,\n        amount: entry.amount\n      }))];\n\n      // Sort combined data by date (assuming newer first)\n      combinedData.sort((a, b) => b.date - a.date);\n      return combinedData;\n    } catch (error) {\n      console.error(\"Error fetching financial data:\", error);\n      return [];\n    }\n  };\n  const addTransaction = () => {\n    const data = {\n      date: new Date().toISOString().slice(0, 10),\n      source: itemName,\n      amount: parseFloat(cost),\n      category: itemName\n    };\n    const endpoint = type === \"revenue\" ? \"http://localhost:5000/revenues\" : \"http://localhost:5000/expenses\";\n    fetch(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    }).then(response => response.json()).then(data => {\n      console.log(\"Transaction added:\", data);\n      setItemName(\"\");\n      setCost(\"\");\n      setType(\"revenue\");\n      fetchData();\n    }).catch(error => console.error(\"Error adding transaction:\", error));\n  };\n  const totalRevenue = transactions.filter(transaction => transaction.type === \"Revenue\").reduce((acc, curr) => acc + curr.amount, 0);\n  const totalExpenses = transactions.filter(transaction => transaction.type === \"Expense\").reduce((acc, curr) => acc + curr.amount, 0);\n  const profit = totalRevenue - totalExpenses;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"receipt-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Club Finances Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Monthly Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: itemName,\n        onChange: e => setItemName(e.target.value),\n        placeholder: \"Item Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: cost,\n        onChange: e => setCost(e.target.value),\n        placeholder: \"Cost\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: type,\n        onChange: e => setType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"revenue\",\n          children: \"Revenue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"expense\",\n          children: \"Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTransaction,\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabletrans\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"transaction-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Source/Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.date.toLocaleDateString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: transaction.source\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [\"$\", transaction.amount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"income-statement\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Revenue: $\", totalRevenue]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Total Expenses: $\", totalExpenses]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Profit: $\", profit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(MonthlyReceipt, \"7+dmwVkvHa03qT4PXly3hinqYUc=\");\n_c = MonthlyReceipt;\nexport default MonthlyReceipt;\nvar _c;\n$RefreshReg$(_c, \"MonthlyReceipt\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MonthlyReceipt","_s","transactions","setTransactions","itemName","setItemName","cost","setCost","type","setType","fetchData","expenses","fetchExpenses","revenues","fetchRevenues","mergedData","sort","a","b","date","response","fetch","method","headers","ok","Error","data","json","console","log","mappedExpenses","map","entry","Date","source","amount","error","revenuesResponse","revenuesData","paymentsResponse","paymentsData","combinedData","fullname","addTransaction","toISOString","slice","parseFloat","category","endpoint","body","JSON","stringify","then","catch","totalRevenue","filter","transaction","reduce","acc","curr","totalExpenses","profit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","index","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/cyber/Desktop/GITHUB/CPS406Project/frontend/src/admin/income.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/admin.css\";\r\n\r\nconst MonthlyReceipt = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [itemName, setItemName] = useState(\"\");\r\n  const [cost, setCost] = useState(\"\");\r\n  const [type, setType] = useState(\"revenue\");\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    const expenses = await fetchExpenses();\r\n    const revenues = await fetchRevenues();\r\n\r\n    let mergedData = [...expenses, ...revenues].sort((a, b) => b.date - a.date);\r\n\r\n    mergedData = mergedData;\r\n\r\n    setTransactions(mergedData);\r\n  };\r\n\r\n  const fetchExpenses = async () => {\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/getexpenses\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to fetch expenses\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n\r\n      const mappedExpenses = data.map((entry) => ({\r\n        date: new Date(entry.date),\r\n        type: \"Expense\",\r\n        source: entry.source,\r\n        amount: entry.amount,\r\n      }));\r\n\r\n      return mappedExpenses;\r\n    } catch (error) {\r\n      console.error(\"Error fetching expenses:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  // const fetchRevenues = async () => {\r\n  //   try {\r\n  //     const response = await fetch(\"http://localhost:5000/getallpayments\", {\r\n  //       method: \"GET\",\r\n  //       headers: {\r\n  //         \"Content-Type\": \"application/json\",\r\n  //       },\r\n  //     });\r\n\r\n  //     if (!response.ok) {\r\n  //       throw new Error(\"Failed to fetch revenues\");\r\n  //     }\r\n\r\n  //     const data = await response.json();\r\n  //     console.log(data);\r\n\r\n  //     const mappedRevenues = data.map((entry) => ({\r\n  //       date: new Date(entry.date),\r\n  //       type: \"Revenue\",\r\n  //       source: \"Payment - \" + entry.fullname,\r\n  //       amount: entry.amount,\r\n  //     }));\r\n\r\n  //     return mappedRevenues;\r\n  //   } catch (error) {\r\n  //     console.error(\"Error fetching revenues:\", error);\r\n  //     return [];\r\n  //   }\r\n  // };\r\n\r\n  const fetchRevenues = async () => {\r\n    try {\r\n      // Fetch revenues data\r\n      const revenuesResponse = await fetch(\"http://localhost:5000/getrevenue\", {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (!revenuesResponse.ok) {\r\n        throw new Error(\"Failed to fetch revenues\");\r\n      }\r\n      const revenuesData = await revenuesResponse.json();\r\n\r\n      // Fetch payments data\r\n      const paymentsResponse = await fetch(\r\n        \"http://localhost:5000/getallpayments\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        }\r\n      );\r\n      if (!paymentsResponse.ok) {\r\n        throw new Error(\"Failed to fetch payments\");\r\n      }\r\n      const paymentsData = await paymentsResponse.json();\r\n\r\n      // Process and merge the data from both endpoints\r\n      const combinedData = [\r\n        ...revenuesData.map((entry) => ({\r\n          date: new Date(entry.date),\r\n          type: \"Revenue\",\r\n          source: entry.source,\r\n          amount: entry.amount,\r\n        })),\r\n        ...paymentsData.map((entry) => ({\r\n          date: new Date(entry.date),\r\n          type: \"Payment\",\r\n          source: \"Payment - \" + entry.fullname,\r\n          amount: entry.amount,\r\n        })),\r\n      ];\r\n\r\n      // Sort combined data by date (assuming newer first)\r\n      combinedData.sort((a, b) => b.date - a.date);\r\n\r\n      return combinedData;\r\n    } catch (error) {\r\n      console.error(\"Error fetching financial data:\", error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const addTransaction = () => {\r\n    const data = {\r\n      date: new Date().toISOString().slice(0, 10),\r\n      source: itemName,\r\n      amount: parseFloat(cost),\r\n      category: itemName,\r\n    };\r\n\r\n    const endpoint =\r\n      type === \"revenue\"\r\n        ? \"http://localhost:5000/revenues\"\r\n        : \"http://localhost:5000/expenses\";\r\n    fetch(endpoint, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\"Transaction added:\", data);\r\n        setItemName(\"\");\r\n        setCost(\"\");\r\n        setType(\"revenue\");\r\n        fetchData();\r\n      })\r\n      .catch((error) => console.error(\"Error adding transaction:\", error));\r\n  };\r\n\r\n  const totalRevenue = transactions\r\n    .filter((transaction) => transaction.type === \"Revenue\")\r\n    .reduce((acc, curr) => acc + curr.amount, 0);\r\n\r\n  const totalExpenses = transactions\r\n    .filter((transaction) => transaction.type === \"Expense\")\r\n    .reduce((acc, curr) => acc + curr.amount, 0);\r\n\r\n  const profit = totalRevenue - totalExpenses;\r\n\r\n  return (\r\n    <div className=\"receipt-container\">\r\n      <h1 className=\"title\">Club Finances Admin Dashboard</h1>\r\n      <h1>Monthly Transactions</h1>\r\n      <div className=\"add-transaction-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={itemName}\r\n          onChange={(e) => setItemName(e.target.value)}\r\n          placeholder=\"Item Name\"\r\n        />\r\n        <input\r\n          type=\"number\"\r\n          value={cost}\r\n          onChange={(e) => setCost(e.target.value)}\r\n          placeholder=\"Cost\"\r\n        />\r\n        <select value={type} onChange={(e) => setType(e.target.value)}>\r\n          <option value=\"revenue\">Revenue</option>\r\n          <option value=\"expense\">Expense</option>\r\n        </select>\r\n        <button onClick={addTransaction}>Add Transaction</button>\r\n      </div>\r\n\r\n      <div className=\"tabletrans\">\r\n        <table className=\"transaction-table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Type</th>\r\n              <th>Source/Category</th>\r\n              <th>Amount</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {transactions.map((transaction, index) => (\r\n              <tr key={index}>\r\n                <td>{transaction.date.toLocaleDateString()}</td>\r\n                <td>{transaction.type}</td>\r\n                <td>{transaction.source}</td>\r\n                <td>${transaction.amount}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      <div className=\"income-statement\">\r\n        <h3>Total Revenue: ${totalRevenue}</h3>\r\n        <h3>Total Expenses: ${totalExpenses}</h3>\r\n        <h3>Profit: ${profit}</h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthlyReceipt;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}